import axios from 'axios';
import { config } from '../config/config';

interface BookingData {
  date: string;
  time: string;
  duration: string;
  guests: string;
  name: string;
  phone: string;
}

export class TelegramService {
  private readonly botToken: string;
  private readonly chatId: string;
  private readonly apiUrl: string;

  constructor() {
    this.botToken = config.telegramBotToken;
    this.chatId = config.telegramChatId;
    this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('Telegram Service: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
    console.log('Telegram Service: Bot Token:', this.botToken ? '‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚úó –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('Telegram Service: Chat ID:', this.chatId ? '‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚úó –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('Telegram Service: API URL:', this.apiUrl);
  }

  private formatMessage(data: BookingData): string {
    const date = new Date(data.date).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });

    return `üìÖ –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n` +
           `–î–∞—Ç–∞: ${date}\n` +
           `–í—Ä–µ–º—è: ${data.time}\n` +
           `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${data.duration} —á–∞—Å–∞\n` +
           `–ì–æ—Å—Ç–µ–π: ${data.guests}\n\n` +
           `–ò–º—è: ${data.name}\n` +
           `–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}`;
  }

  async sendBookingNotification(data: BookingData): Promise<void> {
    try {
      const message = this.formatMessage(data);
      console.log('Telegram Service: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message);
      
      console.log('Telegram Service: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API');
      const response = await axios.post(`${this.apiUrl}/sendMessage`, {
        chat_id: this.chatId,
        text: message,
        parse_mode: 'HTML'
      });
      
      console.log('Telegram Service: –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', response.data);
    } catch (error) {
      console.error('Telegram Service: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      if (axios.isAxiosError(error)) {
        console.error('Telegram Service: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          status: error.response?.status,
          data: error.response?.data,
          message: error.message,
          url: error.config?.url
        });
      }
      throw new Error('Failed to send booking notification');
    }
  }
} 